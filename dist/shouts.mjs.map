{"version":3,"sources":["../src/shouts.ts"],"sourcesContent":["/**\n * A Shout variable is unknown;\n * - This allows for the creation of a shout variable without knowing its return type.\n * - This allows for usage of the value without the type, fails with `const`.\n */\nexport type ShoutVar = Partial<unknown> & unknown & Record<string, any>;\n\nconst ShoutModule = () => ({\n  /** Core -> this\n   * @example ```ts\n   * ShoutModule.createShout('timergen', () => {...})\n   * ShoutModule.createShout('startTimer', () => {...})\n   *\n   * let timer = timergen;\n   *\n   * startTimer;\n   * console.log(timer)\n   *\n   * setInteral(() => {\n   *   console.log(timer) // X.X ms\n   * }, 1000)\n   * ```\n   */\n  ShoutModule,\n\n  /**\n   * A map to store shout data.\n   */\n  total: new Map<string, any>(),\n\n  /**\n   * Creates a new shout with the given name and callback.\n   * @param name The name of the shout.\n   * @param cb The callback to be executed when the shout is accessed.\n   */\n  createShout(\n    name: string = '',\n    cb: (count: number, total?: any) => any = () => { },\n    implicitReturnValue = null\n  ): typeof globalThis & ShoutVar {\n    let count = 0;\n    let keystore = 0;\n\n    this.total.set(name, {\n      count,\n      keystore,\n      cb,\n      implicitReturnValue,\n    });\n\n    return Object.defineProperty(globalThis, name, {\n      get: () => {\n        count++;\n\n        let shoutData = this.total.has(name) ? this.total.get(name) : null;\n        if (shoutData) {\n          shoutData.count = count;\n          this.total.set(name, shoutData);\n        }\n\n        return !implicitReturnValue\n          ? cb(count, shoutData)\n          : Reflect.get(cb(count, shoutData), implicitReturnValue)\n      },\n\n      set: (value: any) => {\n        let keyName = typeof value === 'string' ? value : (value.name || `${keystore}_${typeof value}`);\n        let shoutData = this.total.get(name) || {};\n        shoutData[keyName] = value;\n        this.total.set(name, shoutData);\n        keystore++;\n      },\n\n      enumerable: true,\n      configurable: true,\n    });\n  },\n\n  /**\n   * Destroys the shout with the given name.\n   * @param name The name of the shout to destroy.\n   * @throws Error if the shout does not exist.\n   */\n  destroyShout(name: string): void {\n    if (!this.total.has(name))\n      throw new Error(`Shout ${name} not found`);\n\n    Reflect.deleteProperty(globalThis, name);\n    this.total.delete(name);\n  },\n\n  /**\n   * Destroys all shouts.\n   */\n  removeAllShouts(): void {\n    this.total.forEach((_, name) => {\n      Reflect.deleteProperty(globalThis, name);\n      this.total.delete(name);\n    });\n  },\n\n  /**\n   * Checks if a shout with the given name exists.\n   * @param name The name of the shout to check.\n   * @returns {boolean} True if the shout exists, false otherwise.\n   */\n  isShout(name: string): boolean {\n    let shoutData: any = Reflect.get(globalThis, name);\n    return !this.total.has(name) || !shoutData || !shoutData[Symbol.for('shout')]?.is;\n  },\n\n  /**\n   * Retrieves the shout data for the given name.\n   * @param name The name of the shout.\n   * @returns The shout data or undefined if not found.\n   */\n  getShout(name: string): any {\n    if (!this.isShout(name))\n      return;\n    return this.total.get(name);\n  },\n\n  /**\n   * Retrieves the type of the shout for the given name.\n   * @param name The name of the shout.\n   * @returns The type of the shout or undefined if not found.\n   */\n  getShoutType(name: string): any {\n    return this.getShout(name)?.type;\n  },\n\n  /**\n   * Retrieves the count of the shout for the given name.\n   * @param name The name of the shout.\n   * @returns The count of the shout or undefined if not found.\n   */\n  getShoutCount(name: string): any {\n    return this.getShout(name)?.count;\n  }\n});\n\nexport const Shouts = ShoutModule();\nShouts.createShout('$_', () => globalThis)\n\ndeclare global {\n  /** Access GlobalThis (This shout should not fail) */\n  // @ts-ignore-next-line\n  const $_: ShoutVar\n}\n\nif (typeof window !== 'undefined')\n  (globalThis as any).Shouts = Shouts;"],"mappings":";AAOA,IAAM,cAAc,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBzB;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,oBAAI,IAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO5B,YACE,OAAe,IACf,KAA0C,MAAM;AAAA,EAAE,GAClD,sBAAsB,MACQ;AAC9B,QAAI,QAAQ;AACZ,QAAI,WAAW;AAEf,SAAK,MAAM,IAAI,MAAM;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAED,WAAO,OAAO,eAAe,YAAY,MAAM;AAAA,MAC7C,KAAK,MAAM;AACT;AAEA,YAAI,YAAY,KAAK,MAAM,IAAI,IAAI,IAAI,KAAK,MAAM,IAAI,IAAI,IAAI;AAC9D,YAAI,WAAW;AACb,oBAAU,QAAQ;AAClB,eAAK,MAAM,IAAI,MAAM,SAAS;AAAA,QAChC;AAEA,eAAO,CAAC,sBACJ,GAAG,OAAO,SAAS,IACnB,QAAQ,IAAI,GAAG,OAAO,SAAS,GAAG,mBAAmB;AAAA,MAC3D;AAAA,MAEA,KAAK,CAAC,UAAe;AACnB,YAAI,UAAU,OAAO,UAAU,WAAW,QAAS,MAAM,QAAQ,GAAG,QAAQ,IAAI,OAAO,KAAK;AAC5F,YAAI,YAAY,KAAK,MAAM,IAAI,IAAI,KAAK,CAAC;AACzC,kBAAU,OAAO,IAAI;AACrB,aAAK,MAAM,IAAI,MAAM,SAAS;AAC9B;AAAA,MACF;AAAA,MAEA,YAAY;AAAA,MACZ,cAAc;AAAA,IAChB,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAAa,MAAoB;AAC/B,QAAI,CAAC,KAAK,MAAM,IAAI,IAAI;AACtB,YAAM,IAAI,MAAM,SAAS,IAAI,YAAY;AAE3C,YAAQ,eAAe,YAAY,IAAI;AACvC,SAAK,MAAM,OAAO,IAAI;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAwB;AACtB,SAAK,MAAM,QAAQ,CAAC,GAAG,SAAS;AAC9B,cAAQ,eAAe,YAAY,IAAI;AACvC,WAAK,MAAM,OAAO,IAAI;AAAA,IACxB,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ,MAAuB;AAC7B,QAAI,YAAiB,QAAQ,IAAI,YAAY,IAAI;AACjD,WAAO,CAAC,KAAK,MAAM,IAAI,IAAI,KAAK,CAAC,aAAa,CAAC,UAAU,OAAO,IAAI,OAAO,CAAC,GAAG;AAAA,EACjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS,MAAmB;AAC1B,QAAI,CAAC,KAAK,QAAQ,IAAI;AACpB;AACF,WAAO,KAAK,MAAM,IAAI,IAAI;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAAa,MAAmB;AAC9B,WAAO,KAAK,SAAS,IAAI,GAAG;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc,MAAmB;AAC/B,WAAO,KAAK,SAAS,IAAI,GAAG;AAAA,EAC9B;AACF;AAEO,IAAM,SAAS,YAAY;AAClC,OAAO,YAAY,MAAM,MAAM,UAAU;AAQzC,IAAI,OAAO,WAAW;AACpB,EAAC,WAAmB,SAAS;","names":[]}